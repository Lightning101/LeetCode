# class Trie:

#     def __init__(self, isEnd=False):
#         self.isEnd = isEnd
#         self.children = [False] * 26

#     def insert(self, word):
#         node = self
#         for c in word:
#             index = ord(c) - ord("a")
#             if temp := node.children[index]:
#                 node = temp
#                 continue
#             node.children[index] = Trie()
#             node = node.children[index]
#         node.isEnd = True

#     def search(self, word):
#         node = self

#         for c in word:
#             index = ord(c) - ord("a")
#             if not node.children[index]:
#                 return []
#             node = node.children[index]
#         suggest = []
#         self.drillWords(node, word, suggest)
#         return suggest

#     def drillWords(self, node, word, result):
#         if not node or len(result) >= 3:
#             return

#         if node.isEnd:
#             result.append(word)

#         for i in range(26):
#             self.drillWords(node.children[i], word + chr(i + ord("a")), result)


# class Solution:
#     def suggestedProducts(
#         self, products: list[str], searchWord: str
#     ) -> list[list[str]]:

#         root = Trie()
#         for word in products:
#             root.insert(word)

#         ans = []

#         for i in range(len(searchWord)):
#             word = searchWord[: i + 1]
#             temp = root.search(word)
#             ans.append(temp)

#         return ans


# class Solution:
#     def suggestedProducts(
#         self, products: list[str], searchWord: str
#     ) -> list[list[str]]:
#         products.sort()

#         ans = []
#         for i in range(len(searchWord)):
#             word = searchWord[: i + 1]

#             ans.append([])
#             firstMatch = -1
#             for i in range(len(products)):
#                 if products[i].startswith(word):
#                     firstMatch = i
#                     break

#             if firstMatch == -1:
#                 continue
#             while firstMatch < len(products) and len(ans[-1]) <= 3:
#                 if products[firstMatch].startswith(word):
#                     ans[-1].append(products[firstMatch])
#                 firstMatch += 1
#         return ans



from bisect import bisect_left

class Solution:
    def suggestedProducts(self, products, searchWord):
        products.sort()
        result = []
        bsStart = 0
        n = len(products)
        prefix = ""
        
        for c in searchWord:
            prefix += c
            start = bisect_left(products, prefix, bsStart)
            temp = []
            for i in range(start, min(start + 3, n)):
                if products[i].startswith(prefix):
                    temp.append(products[i])
                else:
                    break
            result.append(temp)
            bsStart = start
        
        return result


s = Solution()

# Example 1:

# Input: products = ["mobile","mouse","moneypot","monitor","mousepad"], searchWord = "mouse"
# Output: [["mobile","moneypot","monitor"],["mobile","moneypot","monitor"],["mouse","mousepad"],["mouse","mousepad"],["mouse","mousepad"]]
# Explanation: products sorted lexicographically = ["mobile","moneypot","monitor","mouse","mousepad"].
# After typing m and mo all products match and we show user ["mobile","moneypot","monitor"].
# After typing mou, mous and mouse the system suggests ["mouse","mousepad"].

# print(
#     s.suggestedProducts(["mobile", "mouse", "moneypot", "monitor", "mousepad"], "mouse")
# )
# Example 2:

# Input: products = ["havana"], searchWord = "havana"
# Output: [["havana"],["havana"],["havana"],["havana"],["havana"],["havana"]]
# Explanation: The only word "havana" will be always suggested while typing the search word.
# print(s.suggestedProducts(["havana"], "havana"))


print(
    s.suggestedProducts(
        [
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnunqerptgas",
            "zmmirsxdhyxvmdybjzondyvrkzeafhvualsivfueweuusmsxbttdeofzeripaqv",
            "tyqcpfvorznmxxdzepfxabibcagilwjsqncxnpjqsxjzqqqbae",
            "tyqcpfvacyrjvmadrmntxotgvgivdvcuwygpjfwcuppunolukrum",
            "tyqcpfvrqwrcpusmfyhxaiasfbb",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqyalwiaj",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnuniwwjbdchidnpt",
            "lfjkcljnd",
            "zibrwfpwecubjlsjbkrhnvolnnzrqhdynloplzagwnuhpxhbvpxnqaifnln",
            "ybswoottdgryxtupichpvqjmcoytrwnfgzrrnaejojvpzmttlzw",
            "tyqcplghosxjviooiyddhvzzrhuuwkiosmgafxyajcdyqlmthqkoylxhtxdruw",
            "okoscfpxcndzgbtsozdofgnomtglmoaewgzzjvrxezoq",
            "cxkwvaytkxgafeltbanhsvxlorigkuxnsxlmhvwqm",
            "iamtabcpdagicnvdvqcfykonsazrbdivxtczpgqgxjrifukmqjw",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbneryahanhrhkal",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnunl",
            "tyqcpfvorznmxxdzsuyushueegfrnlzbydnefcfagqnxglkulegntoml",
            "zlovtmburfkd",
            "vlzfaamutsfqefpafzffwhvpfw",
            "bbufxzwpryyakbxuhwwplvdptgybbykqxirsrahsokviihxrawcbgwrktvgacmwtc",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnuniwwjbzw",
            "kjundphljswl",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqhlqnapfkcqpdb",
            "stcphvgxvcaysehvrfdfllwvxf",
            "epbtkgnnupbbdqgheyaks",
            "gilhnlfkdz",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnuniwghy",
            "yswdsvnzucvsdzrmeghevjrfuhoebfedvyvortaxppwqncmspctdcjlwdxfnc",
            "baizdtmgozykukcrkapsnp",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgcsfjgtwqqubbhjkzmio",
            "iblyydfzztmtyjmgrxvyjwcobfyxcgyrbtnfhhxswxahze",
            "tyqcpfyggtmjahhpjzwhohvchyofsxwkehq",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnuniaymgkdduoabmp",
            "gpsqlqorcbqffdxlnijgvzvxilnbkynwscuoymqyg",
            "eidradnaqjwmucbrgtp",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzopnqxxcxshbhdmippldmcuxlvc",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbfmryrbgicgzqecje",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuze",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqandxbuvshebs",
            "tyqcqqxonxtwakxlrceyknbockvovdwumbjkfrgmudiafbqlflonfavpsrfq",
            "tyqcpfvorznmxxdzsnkjnrrzpfourbghe",
            "ziarqmfvzqpqhunfxwfwjtetotozkjaszznbtrvtxarysaxq",
            "tyqcpfvorznmxfmlzlcuikpxvahtfbfipjcgmeusshufvnirwcopdnvnop",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvdertpdpdjsngezrnyjxotgonuigmqkgipgb",
            "tyqcpfvorznmxxdzsnkjnrrzpfvfcvufmzzuqrjubsfzp",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqorqffebhoyfvgkspenqpcmvoxpybkjg",
            "oqojrvinnhlwuqllcsabkpfiusfucpjbsxzzhlgduawaqyp",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnuniwwjbdchviaxsw",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqnzudhzclswotlbgdffwiekw",
            "csgadyglxddodloklsegvsbtgtkloklmxkbxxyorcqwybktuzpyeaqasn",
            "tyqitegmijccjwxuwvchbvuvllmgsdugzxdkiqvnllhmsjyskxpzzds",
            "tyqcpfvorznigwmavbguxwhunsshdybhzszxvlnpingqgaghkqzeynbbbhgcxeydir",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnunflh",
            "tyqcpfvorznmbwmhfmudnurhismirfgvojpdmclw",
            "tyqcpfvjijiwoup",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejemb",
            "tyqcpfvorznmxxdzsnkjhvabtzucyooctzzrgehlsuyinrrnzjilfpalvqgwoey",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnuniwwjbdchvie",
            "tyqcpfvorznmxxxvjwfgcwegpibuifhfxyomnicutaegshpnschktxknqytritr",
            "tyqcpfvorznetvhiaobezckojwjbeg",
            "tyqcpfvorzmjabuccipqln",
            "frutebajqddrtrsmabfmdcgipssymldwscxbbrbpb",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnuniwwjbdchviotvqi",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnuniwwjbdchxeyrnlh",
            "yaxaddctugikoutgcwqsdekghoemtooljxvysnzqqvgpc",
            "tyqcpfvorznmxxdzsnkjn",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqggjwxdvqesbgrqei",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckoktdj",
            "mzwjshgbgbdogqbrhfgbjkrqogyynbdwwkdclsbpynlrhxeucuuo",
            "tyqcpfvorznmxxdzsnkjnrrztrqgpbvvxm",
            "u",
            "tyqcpfvorznmxjnsgyirdtzpwywpnrvgadkmdjghlmerbqysaebyge",
            "tyqcpfvorznmxxdzsnkjnrkjelwoqorxsnyjqdnxfava",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnuniwwjbdchvqqy",
            "hcav",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnuniwwjbdchviof",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnuniwreznx",
            "yesupowwycvcdbknhrkfyvnpoqtdhcbhybqvhnvgukoohh",
            "hcvlnbmcrepblcqrvwpfsyevlpyldptubnxkntqhpounxjcw",
            "lwaxzivycjkanvikqpbrvdvjkaclyuyfitwfycsnfwjg",
            "tkruiswrcbzsbkwbhhvjzzuuiayqzbxjosjssacislcvbtcojpmyatkfgyx",
            "ftujoohzvjonlwxwskeydoxpfvbvrdndbhgpuvykif",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqqngbpbdtufkgunalbekxbkpajlgbjtqmswh",
            "tyqcpfvorznmxxdzsnkjnrrzpewgvvnicz",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknjxnepksgdzwxsbziwdzsiiyarxhtpp",
            "jumcvboxaxjfybdlezcjrarolxjtsuweaigkiudusinfmnczdualqzlpwkm",
            "tyqcpfvoxegnpqesbaugr",
            "bteznmwyh",
            "rtbpifxevchngjnlumvtqtpebgtoznvvrzfxqzmcktoxydbstbvukrunnyeqwfd",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejysfrlewzsgukyahggau",
            "mvrrbfbfwyrxooopgcbwmtjfepejyfrqdkyaqencqqlagoilrtdndfyn",
            "tyqcpfvorznmyrzwhjxvhooytltygrakvgkqumrimazzhzoueyqnjz",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnuniwwjbdchviob",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnuniwwoyvqczogovza",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvfnzshqqfpr",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnuniwwjghvqg",
            "zqrnaierpnsigujuxrftdiauazddadqmrwcimxyztwumwzyjcrqvuexnitdecfgo",
            "xusxbbilivpovzsjvfsdnacipk",
            "tyqcpfvorznmxxdzkbqgrgeolnwhtvlckmiattpmxwwtmlifnexxbgtpjslwhczrjlhr",
            "eiuytvdzhcodcrdgthxynurtpsdyguupijjluucpfinrfnsjkdbbzexfmctejlgvd",
            "tyqcpfudqjrabwwvdvwmsyscnazaxpsjjhetouegipqevvointclztzummwrrbntjlsj",
            "tyqcpfvobzfvbiuoktjcqjfx",
            "tyqcpfvorznmxxdzsnamc",
            "ajqpomnpmsayhelmhfehjbvjaeszqigfqyuixbtyjy",
            "jpfxangixfavlhcssecxljksydrjxmaldhwpftinywtbmffsmtslefcuddk",
            "txryxhtutwdrqmpcapbcrlmhzsobueefwfekusmmylr",
            "etzqiepphjcleaocnwljcdn",
            "tyqcpfvokfxlbmbzmitacnromkoaoxl",
            "iddmxxcmwecfutbrbqeihhlnypckofuhkbydmljfemzrvlxsuskxkbgviybzu",
            "tyqcpfvorznmxxdzwilcfwrdlfqppdnuvgltuoooppwyomtvtggmsfxsxievdlsyame",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvzquhbkvburnhmerkuabrfcjwanzmfenz",
            "tyqcpqgaus",
            "zsbcqgctsjdjyfkdvcehawsqzacafwtjmhemfygdahkexvmkqkcehvek",
            "tyqcpfvorznmxxdzsnkjfesxjshxtlinfjltdfl",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnubpoqoghhgbpew",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnuniwwjbdcuudsuqq",
            "tyqcpgwivyfquxqhbkjbioekqbsd",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnudxocavmwpggka",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvnlxdokehsjhiohwdeyikeajzipztzhwmxc",
            "pmpoycdxttisazazsgiswnsnhdmejpjbygvtjhwqydeugbouekvornbeiwmpehikbz",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnuniwcpoxr",
            "qmgnrjtavzsqtwareroiihendgcvbzbcolvfoanmixxrxdtnmtevvv",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnunix",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetxpdyhmk",
            "tyqcpfvorznmxxdzsnkjnrfmy",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetaoqgbczdcemzlmqemy",
            "tyqcpfzmlffhifutomuvfvwaqatopvur",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvdvagddprewvlgx",
            "ozmyertmnlwybntwxmpynuynhqdbqhosvjwexzqgvdtnvxexxwwwwhqktmzbfkjfn",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckohyof",
            "rniiqnzbctzeyeeyrxhfzqgbccplsncvtswcrqmevplfzadlulazmpmhdojwaokn",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzakckmtmjxx",
            "tyqcpfvorznmxxdzsnkjnrrzpfgkhdwienfhpsqbyrvotbgchkkmvk",
            "tyqcpfvorznmxxdzsnkjnrrumaqtylptffsjzygeumkahutdmalkqtrhtgrsrqcyyti",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnuniwwjbdchvioncnr",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnuniwwjbdchvigzpo",
            "tyqcpfvorznmxxdzsnkjnrrzpfgkeduq",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnccdnakfkhtg",
            "lhehmbyzcnlwvr",
            "tyqcpfvojuuprlby",
            "wds",
            "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqvegfwmtdcrvdb",
            "tyqcpfvorznpkeynkmbbyptclmhxxlyjzejqbcatgfrmkbbmxs",
            "tyqcpfvorznmiqmfrhihxsagizcrwyaukrjwbbgrxdzknq",
            "ghhlssixrouzbqcpmxzmsnybaygtb",
            "jndewk",
            "tyqcpfvorznmxxdzsnkjnrrzpdqanmxattjhgnflnoyynevsxvpbwfmfrnlc",
        ],
        "tyqcpfvorznmxxdzsnkjnrrzpfgknvqvderckuzdqqgaqejetbnuniwwjbdchviotvdticwxwcliylrpvrokbcguhnfvpd",
    )
)
